package cmd

import (
	"errors"
	"fmt"
	"os"
	"zayd62/otp-cli/lib"

	"github.com/spf13/cobra"
)

var addShortHelp = "add OTP so that codes can be generated by otp-cli \n\n"

// addCmd represents the add command
var addCmd = &cobra.Command{
	Use:   "add",
	Short: addShortHelp,
	Long: addShortHelp + `The add commands take two arguments, the TYPE that you are adding and the PATH. The TYPE is the OTP input format and the PATH is where you can find the type to add. The details for the types and their paths can be found in the table below:

` + addHelpTable,
	Args:    cobra.ExactArgs(2),
	Example: "  otp-cli add TYPE PATH",
	RunE: func(cmd *cobra.Command, args []string) error {

		addTypeParsed := args[0]
		addPathParsed := args[1]

		// parse the individual types. should match what is found in cmd/const.go in validaddTypeArray
		switch addTypeParsed {
		case "otpauth-uri":
			fmt.Println("found otpauth-uri")
			otpstruct, err := lib.ParseOTPAuthURI(addPathParsed)
			if err != nil {
				fmt.Println(err)
				os.Exit(1)
			}
		case "otpauth-file":
			fmt.Println("found otpauth-file")
		default:
			errorMessage := "invalid add type, the valid types are below: \n\n" + addHelpTable
			return errors.New(errorMessage)
		}
		// fmt.Println(lib.Apple)
		// errorString := fmt.Sprintf("for the type %s, we were unable to correctly parse %s. Please check the type and path and try again", addTypeParsed, addPathParsed)
		// fmt.Println(errorString)
		return nil
	},
}

func init() {
	rootCmd.AddCommand(addCmd)

	// Here you will define your flags and configuration settings.

	// Cobra supports Persistent Flags which will work for this command
	// and all subcommands, e.g.:
	// addCmd.PersistentFlags().String("foo", "", "A help for foo")

	// Cobra supports local flags which will only run when this command
	// is called directly, e.g.:
	// addCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
}
